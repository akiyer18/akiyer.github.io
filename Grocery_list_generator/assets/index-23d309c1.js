(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const r of n.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&i(r)}).observe(document,{childList:!0,subtree:!0});function t(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerPolicy&&(n.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?n.credentials="include":s.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(s){if(s.ep)return;s.ep=!0;const n=t(s);fetch(s.href,n)}})();const u=[{id:"pasta-carbonara",name:"Pasta Carbonara",cuisine:"Italian",ingredients:["spaghetti","eggs","bacon","parmesan cheese","black pepper","garlic"]},{id:"margherita-pizza",name:"Margherita Pizza",cuisine:"Italian",ingredients:["pizza dough","tomato sauce","mozzarella cheese","fresh basil","olive oil"]},{id:"lasagna",name:"Lasagna",cuisine:"Italian",ingredients:["lasagna sheets","ground beef","onion","garlic","tomato sauce","ricotta cheese","mozzarella cheese","parmesan cheese"]},{id:"butter-chicken",name:"Butter Chicken",cuisine:"Indian",ingredients:["chicken breast","butter","onion","garlic","ginger","tomatoes","heavy cream","garam masala","turmeric","basmati rice"]},{id:"dal-tadka",name:"Dal Tadka",cuisine:"Indian",ingredients:["yellow lentils","onion","tomatoes","garlic","ginger","cumin seeds","turmeric","red chili powder","cilantro"]},{id:"biryani",name:"Chicken Biryani",cuisine:"Indian",ingredients:["basmati rice","chicken","onions","yogurt","ginger-garlic paste","biryani masala","saffron","mint leaves","fried onions"]},{id:"tacos",name:"Chicken Tacos",cuisine:"Mexican",ingredients:["chicken breast","taco shells","lettuce","tomatoes","cheese","sour cream","onion","lime","cilantro"]},{id:"guacamole",name:"Guacamole",cuisine:"Mexican",ingredients:["avocados","lime juice","onion","tomatoes","garlic","jalape√±o","cilantro","salt"]},{id:"quesadilla",name:"Cheese Quesadilla",cuisine:"Mexican",ingredients:["flour tortillas","cheese","bell peppers","onions","chicken","salsa","sour cream"]},{id:"fried-rice",name:"Chicken Fried Rice",cuisine:"Chinese",ingredients:["rice","chicken","eggs","vegetables","soy sauce","garlic","ginger","green onions","sesame oil"]},{id:"sweet-sour-chicken",name:"Sweet and Sour Chicken",cuisine:"Chinese",ingredients:["chicken breast","bell peppers","pineapple","onion","vinegar","sugar","ketchup","soy sauce","cornstarch"]},{id:"lo-mein",name:"Vegetable Lo Mein",cuisine:"Chinese",ingredients:["lo mein noodles","mixed vegetables","soy sauce","sesame oil","garlic","ginger","green onions"]},{id:"burger",name:"Classic Burger",cuisine:"American",ingredients:["ground beef","burger buns","lettuce","tomatoes","onion","pickles","cheese","ketchup","mustard"]},{id:"mac-cheese",name:"Mac and Cheese",cuisine:"American",ingredients:["macaroni pasta","cheddar cheese","butter","milk","flour","breadcrumbs"]},{id:"grilled-chicken",name:"Grilled Chicken Salad",cuisine:"American",ingredients:["chicken breast","mixed greens","tomatoes","cucumber","red onion","croutons","salad dressing"]},{id:"pad-thai",name:"Pad Thai",cuisine:"Thai",ingredients:["rice noodles","shrimp","eggs","bean sprouts","peanuts","lime","fish sauce","sugar","tamarind paste"]},{id:"green-curry",name:"Green Curry Chicken",cuisine:"Thai",ingredients:["chicken","green curry paste","coconut milk","thai basil","eggplant","bell peppers","fish sauce","jasmine rice"]},{id:"greek-salad",name:"Greek Salad",cuisine:"Mediterranean",ingredients:["tomatoes","cucumber","red onion","feta cheese","olives","olive oil","lemon juice","oregano"]},{id:"hummus",name:"Hummus",cuisine:"Mediterranean",ingredients:["chickpeas","tahini","lemon juice","garlic","olive oil","cumin","paprika"]}],o={GROCERY_ITEMS:"grocery-items",CUSTOM_DISHES:"custom-dishes",FREQUENT_ITEMS:"frequent-items",PURCHASE_HISTORY:"purchase-history"};class d{static getGroceryItems(){const e=localStorage.getItem(o.GROCERY_ITEMS);return e?JSON.parse(e).map(t=>({...t,dateAdded:new Date(t.dateAdded),lastPurchased:t.lastPurchased?new Date(t.lastPurchased):void 0,dueDate:t.dueDate?new Date(t.dueDate):void 0})):[]}static saveGroceryItems(e){localStorage.setItem(o.GROCERY_ITEMS,JSON.stringify(e))}static getCustomDishes(){const e=localStorage.getItem(o.CUSTOM_DISHES);return e?JSON.parse(e):[]}static saveCustomDishes(e){localStorage.setItem(o.CUSTOM_DISHES,JSON.stringify(e))}static getFrequentItems(){const e=localStorage.getItem(o.FREQUENT_ITEMS);return e?JSON.parse(e).map(t=>({...t,lastUsed:new Date(t.lastUsed)})):[]}static saveFrequentItems(e){localStorage.setItem(o.FREQUENT_ITEMS,JSON.stringify(e))}static updateFrequentItem(e){const t=this.getFrequentItems(),i=t.findIndex(s=>s.name.toLowerCase()===e.toLowerCase());i>=0?(t[i].count++,t[i].lastUsed=new Date):t.push({name:e,count:1,lastUsed:new Date}),this.saveFrequentItems(t)}static getPurchaseHistory(){const e=localStorage.getItem(o.PURCHASE_HISTORY);return e?JSON.parse(e).map(t=>({...t,date:new Date(t.date)})):[]}static addPurchaseHistory(e){const t=this.getPurchaseHistory();t.push({items:e,date:new Date,id:Date.now().toString()}),t.length>50&&t.splice(0,t.length-50),localStorage.setItem(o.PURCHASE_HISTORY,JSON.stringify(t))}static calculateDueDate(e,t){const i=t||new Date,s=new Date(i);switch(e){case"daily":s.setDate(s.getDate()+1);break;case"weekly":s.setDate(s.getDate()+7);break;case"biweekly":s.setDate(s.getDate()+14);break;case"monthly":s.setMonth(s.getMonth()+1);break}return s}}class h{constructor(e,t){this.dish=e,this.onSelect=t}render(){const e=document.createElement("div");return e.className="dish-card",e.innerHTML=`
            <div class="dish-header">
                <h3 class="dish-name">${this.dish.name}</h3>
                <span class="dish-cuisine">${this.dish.cuisine}</span>
            </div>
            <div class="dish-ingredients">
                <strong>Ingredients:</strong>
                <ul class="ingredients-list">
                    ${this.dish.ingredients.map(i=>`<li>${i}</li>`).join("")}
                </ul>
            </div>
            <button class="btn-select" data-dish-id="${this.dish.id}">Select Dish</button>
        `,e.querySelector(".btn-select").addEventListener("click",()=>{this.onSelect(this.dish)}),e}}class m{constructor(e,t,i){this.selectedDish=e,this.onEdit=t,this.onRemove=i}render(){const e=document.createElement("div");e.className="selected-dish-card",e.innerHTML=`
            <div class="selected-dish-header">
                <h4 class="dish-name">${this.selectedDish.dish.name}</h4>
                <div class="dish-actions">
                    <button class="btn-edit" data-dish-id="${this.selectedDish.dish.id}">‚úèÔ∏è Edit</button>
                    <button class="btn-remove" data-dish-id="${this.selectedDish.dish.id}">üóëÔ∏è Remove</button>
                </div>
            </div>
            <div class="selected-ingredients">
                ${this.selectedDish.isEdited?'<span class="edited-badge">üîß Modified</span>':""}
                <ul class="ingredients-list">
                    ${this.selectedDish.ingredients.map(s=>`<li>${s}</li>`).join("")}
                </ul>
            </div>
        `;const t=e.querySelector(".btn-edit"),i=e.querySelector(".btn-remove");return t.addEventListener("click",()=>{this.onEdit(this.selectedDish.dish.id)}),i.addEventListener("click",()=>{this.onRemove(this.selectedDish.dish.id)}),e}update(e){this.selectedDish=e}}class g{constructor(e,t,i){this.item=e,this.onToggle=t,this.onDelete=i}render(){const e=document.createElement("div");e.className=`grocery-item ${this.item.purchased?"purchased":""}`;const t=this.item.dueDate?this.formatDueDate(this.item.dueDate):"",i=this.item.dueDate&&this.item.dueDate<new Date&&!this.item.purchased;e.innerHTML=`
            <div class="item-content">
                <label class="item-checkbox">
                    <input type="checkbox" ${this.item.purchased?"checked":""} />
                    <span class="checkmark"></span>
                </label>
                <div class="item-details">
                    <div class="item-main">
                        <span class="item-name">${this.item.name}</span>
                        ${this.item.quantity?`<span class="item-quantity">(${this.item.quantity})</span>`:""}
                        <span class="item-frequency frequency-${this.item.frequency}">${this.item.frequency}</span>
                    </div>
                    ${this.item.notes?`<div class="item-notes">${this.item.notes}</div>`:""}
                    ${t?`<div class="item-due-date ${i?"overdue":""}">${t}</div>`:""}
                </div>
                <button class="btn-delete" data-id="${this.item.id}">üóëÔ∏è</button>
            </div>
        `;const s=e.querySelector('input[type="checkbox"]'),n=e.querySelector(".btn-delete");return s.addEventListener("change",()=>{this.onToggle(this.item.id)}),n.addEventListener("click",()=>{this.onDelete(this.item.id)}),e}formatDueDate(e){const t=new Date,i=e.getTime()-t.getTime(),s=Math.ceil(i/(1e3*60*60*24));return s<0?`Overdue by ${Math.abs(s)} day(s)`:s===0?"Due today":s===1?"Due tomorrow":s<=7?`Due in ${s} days`:`Due ${e.toLocaleDateString()}`}update(e){this.item=e}}class p{constructor(e,t){this.item=e,this.onClick=t}render(){const e=document.createElement("div");e.className="reminder-tile";const t=this.item.dueDate&&this.item.dueDate<new Date,i=this.item.dueDate?this.formatDueDate(this.item.dueDate):"";return t&&e.classList.add("overdue"),e.innerHTML=`
            <div class="reminder-content">
                <div class="reminder-header">
                    <span class="reminder-name">${this.item.name}</span>
                    <span class="reminder-frequency">${this.item.frequency}</span>
                </div>
                <div class="reminder-due">${i}</div>
                ${this.item.quantity?`<div class="reminder-quantity">Qty: ${this.item.quantity}</div>`:""}
                ${this.item.notes?`<div class="reminder-notes">${this.item.notes}</div>`:""}
            </div>
        `,e.addEventListener("click",()=>{this.onClick(this.item.id)}),e}formatDueDate(e){const t=new Date,i=e.getTime()-t.getTime(),s=Math.ceil(i/(1e3*60*60*24));return s<0?`üö® Overdue by ${Math.abs(s)} day(s)`:s===0?"‚ö†Ô∏è Due today":s===1?"üìÖ Due tomorrow":s<=7?`üìÖ Due in ${s} days`:`üìÖ Due ${e.toLocaleDateString()}`}}class y{constructor(){this.selectedDishes=[],this.groceryItems=[],this.customDishes=[],this.currentPage="dishes",this.currentFilter="all",this.loadData(),this.setupEventListeners(),this.setupNavigation(),this.updateAllViews()}loadData(){this.groceryItems=d.getGroceryItems(),this.customDishes=d.getCustomDishes()}setupNavigation(){const e=document.querySelectorAll(".nav-tab"),t=document.querySelectorAll(".page");e.forEach(i=>{i.addEventListener("click",s=>{var a;const n=s.target,r=n.dataset.page;r&&(e.forEach(c=>c.classList.remove("active")),t.forEach(c=>c.classList.remove("active")),n.classList.add("active"),(a=document.getElementById(`${r}-page`))==null||a.classList.add("active"),this.currentPage=r,this.updateCurrentPageView())})})}setupEventListeners(){this.setupDishesPageListeners(),this.setupManualPageListeners(),this.setupRemindersPageListeners()}setupDishesPageListeners(){const e=document.getElementById("dish-search"),t=document.getElementById("search-btn"),i=()=>{const n=e.value.trim();this.searchAndDisplayDishes(n)};e.addEventListener("input",i),t.addEventListener("click",i),e.addEventListener("keypress",n=>{n.key==="Enter"&&i()}),document.getElementById("add-to-grocery").addEventListener("click",()=>{this.addSelectedDishesToGroceryList()}),this.setupAddDishModal()}setupManualPageListeners(){document.getElementById("manual-add-form").addEventListener("submit",i=>{i.preventDefault(),this.addManualGroceryItem()});const t=document.querySelectorAll(".filter-btn");t.forEach(i=>{i.addEventListener("click",s=>{const n=s.target,r=n.dataset.frequency;r&&(t.forEach(a=>a.classList.remove("active")),n.classList.add("active"),this.currentFilter=r,this.updateGroceryListView())})})}setupRemindersPageListeners(){document.getElementById("sort-reminders").addEventListener("change",()=>{this.updateRemindersView()}),document.getElementById("show-frequent").addEventListener("change",()=>{this.updateFrequentItemsView()})}setupAddDishModal(){const e=document.getElementById("add-dish-modal"),t=e.querySelector(".close"),i=document.getElementById("cancel-dish"),s=document.getElementById("add-dish-form"),n=document.getElementById("add-ingredient"),r=()=>{e.style.display="block"},a=()=>{e.style.display="none",s.reset(),this.resetIngredientInputs()};t.addEventListener("click",a),i.addEventListener("click",a),e.addEventListener("click",c=>{c.target===e&&a()}),n.addEventListener("click",()=>{this.addIngredientInput()}),s.addEventListener("submit",c=>{c.preventDefault(),this.saveNewDish(),a()}),document.addEventListener("click",c=>{c.target.classList.contains("btn-add-new-dish")&&r()})}searchAndDisplayDishes(e){const t=document.getElementById("search-results");if(!e){t.innerHTML="";return}const s=[...u,...this.customDishes].filter(n=>n.name.toLowerCase().includes(e.toLowerCase())||n.cuisine.toLowerCase().includes(e.toLowerCase())||n.ingredients.some(r=>r.toLowerCase().includes(e.toLowerCase())));s.length===0?t.innerHTML=`
                <div class="no-results">
                    <p>No dishes found for "${e}"</p>
                    <button class="btn-add-new-dish btn-primary">+ Add New Dish</button>
                </div>
            `:(t.innerHTML="",s.forEach(n=>{const r=new h(n,a=>{this.selectDish(a)});t.appendChild(r.render())}))}selectDish(e){this.selectedDishes.find(i=>i.dish.id===e.id)||(this.selectedDishes.push({dish:e,ingredients:[...e.ingredients],isEdited:!1}),this.updateSelectedDishesView(),this.updateGroceryPreview())}updateSelectedDishesView(){const e=document.getElementById("selected-dishes");if(e.innerHTML="",this.selectedDishes.length===0){e.innerHTML='<p class="no-selected">No dishes selected. Search and select dishes to build your grocery list.</p>';return}e.innerHTML="<h3>Selected Dishes</h3>",this.selectedDishes.forEach(t=>{const i=new m(t,s=>this.editDishIngredients(s),s=>this.removeDish(s));e.appendChild(i.render())})}updateGroceryPreview(){const e=document.getElementById("preview-items"),t=document.getElementById("add-to-grocery");if(this.selectedDishes.length===0){e.innerHTML="<p>Select dishes to preview ingredients</p>",t.disabled=!0;return}const i=new Set;this.selectedDishes.forEach(s=>{s.ingredients.forEach(n=>{i.add(n)})}),e.innerHTML=`
            <ul class="preview-list">
                ${Array.from(i).map(s=>`<li>${s}</li>`).join("")}
            </ul>
        `,t.disabled=!1}editDishIngredients(e){const t=this.selectedDishes.find(s=>s.dish.id===e);if(!t)return;const i=prompt("Edit ingredients (comma-separated):",t.ingredients.join(", "));i!==null&&(t.ingredients=i.split(",").map(s=>s.trim()).filter(s=>s),t.isEdited=!0,this.updateSelectedDishesView(),this.updateGroceryPreview())}removeDish(e){this.selectedDishes=this.selectedDishes.filter(t=>t.dish.id!==e),this.updateSelectedDishesView(),this.updateGroceryPreview()}addSelectedDishesToGroceryList(){const e=new Set;this.selectedDishes.forEach(t=>{t.ingredients.forEach(i=>{e.add(i)})}),Array.from(e).forEach(t=>{const i={id:Date.now().toString()+Math.random(),name:t,frequency:"weekly",purchased:!1,dateAdded:new Date,purchaseCount:0,dueDate:d.calculateDueDate("weekly")};this.groceryItems.push(i),d.updateFrequentItem(t)}),this.selectedDishes=[],this.saveGroceryItems(),this.updateSelectedDishesView(),this.updateGroceryPreview(),alert(`Added ${e.size} ingredients to your grocery list!`)}addManualGroceryItem(){const e=document.getElementById("manual-item"),t=document.getElementById("manual-quantity"),i=document.getElementById("manual-notes"),s=document.getElementById("manual-frequency"),n={id:Date.now().toString(),name:e.value.trim(),quantity:t.value.trim()||void 0,notes:i.value.trim()||void 0,frequency:s.value,purchased:!1,dateAdded:new Date,purchaseCount:0,dueDate:d.calculateDueDate(s.value)};this.groceryItems.push(n),d.updateFrequentItem(n.name),this.saveGroceryItems(),document.getElementById("manual-add-form").reset(),this.updateGroceryListView()}updateGroceryListView(){const e=document.getElementById("grocery-list");let t=this.groceryItems;if(this.currentFilter!=="all"&&(t=this.groceryItems.filter(i=>i.frequency===this.currentFilter)),t.length===0){e.innerHTML='<p class="no-items">No grocery items found.</p>';return}e.innerHTML="",t.forEach(i=>{const s=new g(i,n=>this.toggleGroceryItem(n),n=>this.deleteGroceryItem(n));e.appendChild(s.render())})}toggleGroceryItem(e){const t=this.groceryItems.find(i=>i.id===e);t&&(t.purchased=!t.purchased,t.purchased&&(t.lastPurchased=new Date,t.purchaseCount++,t.dueDate=d.calculateDueDate(t.frequency,t.lastPurchased),d.updateFrequentItem(t.name)),this.saveGroceryItems(),this.updateCurrentPageView())}deleteGroceryItem(e){this.groceryItems=this.groceryItems.filter(t=>t.id!==e),this.saveGroceryItems(),this.updateCurrentPageView()}updateRemindersView(){const e=document.getElementById("upcoming-groceries"),t=document.getElementById("sort-reminders"),i=this.groceryItems.filter(s=>!s.purchased&&s.dueDate);if(t.value==="date")i.sort((s,n)=>{var r,a;return(((r=s.dueDate)==null?void 0:r.getTime())||0)-(((a=n.dueDate)==null?void 0:a.getTime())||0)});else{const s={daily:1,weekly:2,biweekly:3,monthly:4};i.sort((n,r)=>s[n.frequency]-s[r.frequency])}if(i.length===0){e.innerHTML='<p class="no-reminders">No upcoming groceries! üéâ</p>';return}e.innerHTML="",i.forEach(s=>{const n=new p(s,r=>{this.navigateToItem(r)});e.appendChild(n.render())})}updateFrequentItemsView(){const e=document.getElementById("frequent-items");if(!document.getElementById("show-frequent").checked){e.style.display="none";return}e.style.display="block";const i=d.getFrequentItems().sort((s,n)=>n.count-s.count).slice(0,10);if(i.length===0){e.innerHTML="<p>No frequent items yet. Start adding groceries!</p>";return}e.innerHTML=`
            <div class="frequent-items-grid">
                ${i.map(s=>`
                    <div class="frequent-item">
                        <span class="frequent-name">${s.name}</span>
                        <span class="frequent-count">${s.count}x</span>
                    </div>
                `).join("")}
            </div>
        `}updateHistoryView(){const e=document.getElementById("grocery-history"),t=d.getPurchaseHistory().sort((i,s)=>s.date.getTime()-i.date.getTime()).slice(0,20);if(t.length===0){e.innerHTML="<p>No purchase history yet.</p>";return}e.innerHTML=`
            <div class="history-list">
                ${t.map(i=>`
                    <div class="history-entry">
                        <div class="history-date">${i.date.toLocaleDateString()}</div>
                        <div class="history-items">${i.items.join(", ")}</div>
                    </div>
                `).join("")}
            </div>
        `}navigateToItem(e){document.querySelector('[data-page="manual"]').click(),setTimeout(()=>{const i=document.querySelector(`[data-id="${e}"]`);i&&(i.scrollIntoView({behavior:"smooth"}),i.classList.add("highlighted"),setTimeout(()=>i.classList.remove("highlighted"),2e3))},100)}addIngredientInput(){var i;const e=document.getElementById("new-ingredients"),t=document.createElement("div");t.className="ingredient-input",t.innerHTML=`
            <input type="text" placeholder="Ingredient" required />
            <button type="button" class="remove-ingredient">√ó</button>
        `,(i=t.querySelector(".remove-ingredient"))==null||i.addEventListener("click",()=>{t.remove()}),e.appendChild(t)}resetIngredientInputs(){const e=document.getElementById("new-ingredients");e.innerHTML=`
            <div class="ingredient-input">
                <input type="text" placeholder="Ingredient" required />
                <button type="button" class="remove-ingredient">√ó</button>
            </div>
        `}saveNewDish(){const e=document.getElementById("new-dish-name"),t=document.querySelectorAll('#new-ingredients input[type="text"]'),i=Array.from(t).map(n=>n.value.trim()).filter(n=>n);if(!e.value.trim()||i.length===0){alert("Please enter dish name and at least one ingredient.");return}const s={id:"custom-"+Date.now(),name:e.value.trim(),cuisine:"Custom",ingredients:i};this.customDishes.push(s),d.saveCustomDishes(this.customDishes),this.selectDish(s),alert("Dish added successfully!")}saveGroceryItems(){d.saveGroceryItems(this.groceryItems)}updateCurrentPageView(){switch(this.currentPage){case"dishes":this.updateSelectedDishesView(),this.updateGroceryPreview();break;case"manual":this.updateGroceryListView();break;case"reminders":this.updateRemindersView(),this.updateFrequentItemsView(),this.updateHistoryView();break}}updateAllViews(){this.updateSelectedDishesView(),this.updateGroceryPreview(),this.updateGroceryListView(),this.updateRemindersView(),this.updateFrequentItemsView(),this.updateHistoryView()}}function f(){new y}document.addEventListener("DOMContentLoaded",()=>{f()});
